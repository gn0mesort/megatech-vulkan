##
## @file command_tags.inl.in
## @brief Vulkan Command Tag Header Template
## @author Alexander Rothman <gnomesort@megate.ch>
## @date 2024
## @copyright AGPL-3.0-or-later
## @cond
<%!
  import sys
  import re
  from argparse import ArgumentParser

  CAMEL_PATTERN = re.compile(r"(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])")

  def to_snake_case(name: str) -> str:
    return CAMEL_PATTERN.sub("_", name).lower()
%>\
<%
  parser = ArgumentParser(prog="command_tags.inl.in", add_help=False, exit_on_error=False, prefix_chars="@")
  parser.add_argument("@help", "@h", action="help", help="Display this help message and exit.")
  try:
    args = parser.parse_args(arguments)
  except Exception as err:
    print(err, file=sys.stderr)
    parser.print_help(file=sys.stderr)
    return STOP_RENDERING
%>\
/**
 * @file command_tags.inl
 * @brief Vulkan Command Tag Types
 * @author Generated
 * @date 2024
 */
#ifndef MEGATECH_VULKAN_COMMAND_TAGS_INL
#define MEGATECH_VULKAN_COMMAND_TAGS_INL

#include <cinttypes>
#include <cstddef>

#if defined(MEGATECH_VULKAN_INCLUDE_VULKAN_H) && __has_include(<vulkan/vulkan.h>)
  #include <vulkan/vulkan.h>
#endif

#ifdef VK_VERSION_1_0
/// @cond INTERNAL
/**
 * @def MEGATECH_VULKAN_COMMAND_TAG
 * @brief Defines a new Vulkan command tag type.
 * @details Vulkan command tags specify compile-time dispatch resolver metadata. This includes the corresponding
 *          function pointer type and the command's name.
 */
#define MEGATECH_VULKAN_COMMAND_TAG(type, cmd) ${"\\"}
  struct type final { ${"\\"}
    using function_pointer_type = PFN_##cmd; ${"\\"}
    static consteval const char* name() { return #cmd; } ${"\\"}
  }
/// @endcond

namespace megatech::vulkan::command_tags {

/// @cond
% for group in sorted(groups):
#if ${group}
% for command in sorted(groups[group]):
  MEGATECH_VULKAN_COMMAND_TAG(${to_snake_case(command.name())}, ${command.name()});
% endfor
#endif
% endfor
/// @endcond

}
#endif

#endif
## @endcond
